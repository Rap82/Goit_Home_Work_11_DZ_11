# ============================== Модуль 11 / Modul 11 =============================================

# +++++++++++++++++++++++++++++  'Магічні' методи  ++++++++++++++++++++++++++++++++++++++

#                     1.'Магічні' методи
#                     2. Метод init
#                     3. Методи str та repr
#                     4. Методи getitem та setitem
#                     5. Функтори, метод call
#                     6. Створення власних менеджерів контексту
#                     7. Створення об'єкта ітератора/генератора
#                     8. Інкапсуляція у Python (property, setter).
#                     9. Перевизначення математичних операторів
#                     10. Перевизначення операцій порівняння


# ================================ Звдання 1 / Task 1 ======================================

# ================================  Метод init  ==========================

# Найчастіше використовуваний магічний метод — це метод __init__. Цей метод відповідає за ініціалізацію об'єкта. 
# Коли ви створюєте об'єкт класу, спочатку створюється порожній об'єкт, який містить лише обов'язкові службові атрибути. 
# Після цього (об'єкт вже створено) автоматично викликається метод __init__, який ви можете модифікувати під ваші потреби.

# class Human:
#     def __init__(self, name, age=0):
#         self.name = name
#         self.age = age

#     def say_hello(self):
#         return f'Hello! I am {self.name}'


# bill = Human('Bill')
# print(bill.say_hello())  # Hello! I am Bill
# print(bill.age)  # 0

# jill = Human('Jill', 20)
# print(jill.say_hello())  # Hello! I am Jill
# print(jill.age)  # 20
# В цьому прикладі ми створили клас Human, у якому визначили метод __init__. 
# У цьому методі ми додаємо об'єктам цього класу поля name та age. Зверніть увагу, 
# що метод __init__ може приймати аргументи позиційні і/або іменні, як будь-який інший метод. 
# Коли ми створюємо об'єкт класу Human, ми повинні класу передати обов'язково хоч один аргумент, 
# скільки метод __init__ повинен приймати обов'язково name.

# __init__ не обов'язково приймає аргументи та містить лише створення полів. 
# Цей метод можна використовувати для реалізації будь-яких дій, які вам потрібні на етапі, 
# коли об'єкт вже створено та його треба ініціалізувати.

# ++++++++++++++++++++++++++++++++++++++Умова / Condition ++++++++++++++++++++++++++++++++++++++++

# Створіть клас Point, який відповідатиме за відображення геометричної точки на площині.

# Реалізуйте через конструктор __init__ ініціалізацію двох атрибутів: координати x та координати y.

# Приклад:

# point = Point(5, 10)

# print(point.x)  # 5
# print(point.y)  # 10

# ++++++++++++++++++++ Код / Code ++++++++++++++++++++++++++++++++++++

class Point: # Створення класу Point
    '''Реалізація класу , Клас містить два обовязкових аргументи і поля 
    Перше поле *.x  з одноіменим аргументом *x ,
    Друге поле *.y з одноіменим аргументом *y '''
    def __init__(self, some_x, some_y) -> None: 
        '''Конструктор класу , вньому описуємо/ралізуємо обовязкові власні поля і значення які вони мають набути'''

        self.x = some_x # Опис/реалізація поля *.x для екзеплярів цього класу .*class Point , 
                   # При створені екземпляр , набуває значення передане як перший обовязковий аргумент *some_x # Шаблон екзепляру Point(*x, *y) 
        self.y = some_y # Опис/реалізація поля *.y для екзеплярів цього класу .*class Point , 
                   # При створені екземпляр , набуває значення передане як другий обовязковий аргумент *some_y# Шаблон екзепляру Point(*x, *y)
        


# # ++++++++++++++++++++++++++++++++++++++++++++++++++ Тестові значення і виклик функції (не потрібний для автоперевірки.) ++++++++++++++++++++++

point = Point(5, 10) # Стверення  екзепляру *point клас *class Point, з заданими початковими даними полів  *x і *y цього класу .
point_1 = Point(5, 10) # Стверення  екзепляру *point_1 клас *class Point, з заданими початковими даними полів  *x і *y цього класу .
some_name = Point("Стрічка", "Нічого собі .)") # і це також .), стверення  екзепляру *some_name клас *class Point, з заданими початковими даними полів  *x і *y цього класу .

print(point)    # Ствоерений екзкпляр має вигляд *<__main__.Point object at 0x000001F8F57FA8D0>
print(point.x)  # 5   # конкретне значення в полі *x цього екзкпляру.
print(point.y)  # 10  # конкретне значення в полі *y цього екзкпляру.
point.x = 100   # встановлення нового значення поля *x цього екзкпляру. (в тілі коду , не реалізації)
print(point.x) # 100 # Принтим поле *x, перевіряємо чи змінилось значення. 
print(point.y) # 10  # Принтим поле *y, перевіряємо чи змінилось значення.(поки поле *y не міняли тому значення є те що пристворенні екзепляру) 
point.y = -45   # встановлення нового значення поля *y цього екзкпляру. 
print(point.y) # -45 # Принтим поле *y, перевіряємо чи змінилось значення.( поле *y змінило своє початкове значення.)
# ==============================
print(point_1)    # Ствоерений екзкпляр має вигляд *<__main__.Point object at 0x000002AD371EA9C0>
print(point_1.x)  # 50
print(point_1.y)  # -10

# =================================
print(some_name)   # Ствоерений екзкпляр має вигляд *<__main__.Point object at 0x0000024B63ADA990>
print(some_name.x) # Стрічка
print(some_name.y) # Нічого собі .)
